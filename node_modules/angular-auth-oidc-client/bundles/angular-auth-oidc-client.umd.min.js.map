{"version":3,"file":"angular-auth-oidc-client.umd.min.js","sources":["../../src/services/oidc.security.check-session.ts","../../src/services/oidc.security.silent-renew.ts","../../src/services/oidc-data.service.ts","../../src/services/oidc.security.user-service.ts","../../src/services/uri-encoder.ts","../../src/services/oidc.security.service.ts","../../src/models/auth.well-known-endpoints.ts","../../src/models/jwtkeys.ts","../../src/modules/auth.module.ts","../../src/services/oidc.security.config.service.ts","../../src/models/authorization-result.enum.ts","../../src/models/validate-state-result.model.ts","../../src/modules/auth.configuration.ts","../../src/services/oidc.security.storage.ts","../../src/services/oidc.security.common.ts","../../src/services/oidc-array-helper.service.ts","../../src/services/oidc-token-helper.service.ts","../../src/services/oidc.logger.service.ts","../../src/services/oidc.security.validation.ts","../../src/services/oidc-security-state-validation.service.ts"],"sourcesContent":["import { Injectable, EventEmitter, Output, NgZone } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { AuthConfiguration } from '../modules/auth.configuration';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { LoggerService } from './oidc.logger.service';\r\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\nexport class OidcSecurityCheckSession {\nprivate sessionIframe: any;\nprivate iframeMessageEvent: any;\nprivate authWellKnownEndpoints: AuthWellKnownEndpoints;\nprivate _scheduledHeartBeat: any;\r\n\r\n    \r\n    onCheckSessionChanged: EventEmitter<any> = new EventEmitter<any>(true);\n/**\n * @param {?} authConfiguration\n * @param {?} oidcSecurityCommon\n * @param {?} loggerService\n * @param {?} zone\n */\nconstructor(\nprivate authConfiguration: AuthConfiguration,\nprivate oidcSecurityCommon: OidcSecurityCommon,\nprivate loggerService: LoggerService,\nprivate zone: NgZone\r\n    ) {}\n/**\n * @param {?} authWellKnownEndpoints\n * @return {?}\n */\nsetupModule(authWellKnownEndpoints: AuthWellKnownEndpoints) {\r\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\r\n    }\n/**\n * @return {?}\n */\ndoesSessionExist(): boolean {\r\n        let /** @type {?} */ existsparent = undefined;\r\n        try {\r\n            const /** @type {?} */ parentdoc = window.parent.document;\r\n            if (!parentdoc) {\r\n                throw new Error('Unaccessible');\r\n            }\r\n\r\n            existsparent = parentdoc.getElementById('myiFrameForCheckSession');\r\n        } catch ( /** @type {?} */e) {\r\n            // not accessible\r\n        }\r\n        const /** @type {?} */ exists = window.document.getElementById(\r\n            'myiFrameForCheckSession'\r\n        );\r\n        if (existsparent) {\r\n            this.sessionIframe = existsparent;\r\n        } else if (exists) {\r\n            this.sessionIframe = exists;\r\n        }\r\n\r\n        if (existsparent || exists) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\n/**\n * @return {?}\n */\ninit() {\r\n        this.sessionIframe = window.document.createElement('iframe');\r\n        this.sessionIframe.id = 'myiFrameForCheckSession';\r\n        this.loggerService.logDebug(this.sessionIframe);\r\n        this.sessionIframe.style.display = 'none';\r\n        window.document.body.appendChild(this.sessionIframe);\r\n        this.sessionIframe.src = this.authWellKnownEndpoints.check_session_iframe;\r\n\r\n        this.iframeMessageEvent = this.messageHandler.bind(this);\r\n        window.addEventListener('message', this.iframeMessageEvent, false);\r\n\r\n        return Observable.create((observer: Observer<any>) => {\r\n            this.sessionIframe.onload = () => {\r\n                observer.next(this);\r\n                observer.complete();\r\n            };\r\n        });\r\n    }\n/**\n * @param {?} clientId\n * @return {?}\n */\nstartCheckingSession(clientId: any): void {\r\n        if (!this._scheduledHeartBeat) {\r\n            this.pollServerSession(clientId);\r\n        }\r\n    }\n/**\n * @return {?}\n */\nstopCheckingSession(): void {\r\n        if (this._scheduledHeartBeat) {\r\n            clearTimeout(this._scheduledHeartBeat);\r\n            this._scheduledHeartBeat = null;\r\n        }\r\n    }\n/**\n * @param {?} clientId\n * @return {?}\n */\npollServerSession(clientId: any) {\r\n        const /** @type {?} */ _pollServerSessionRecur = () => {\r\n            if (this.sessionIframe && clientId) {\r\n                this.loggerService.logDebug(this.sessionIframe);\r\n                const /** @type {?} */ session_state = this.oidcSecurityCommon.sessionState;\r\n                if (session_state) {\r\n                    this.sessionIframe.contentWindow.postMessage(\r\n                        clientId + ' ' + session_state,\r\n                        this.authConfiguration.stsServer\r\n                    );\r\n                }\r\n            } else {\r\n                this.loggerService.logWarning(\r\n                    'OidcSecurityCheckSession pollServerSession sessionIframe does not exist'\r\n                );\r\n                this.loggerService.logDebug(clientId);\r\n                this.loggerService.logDebug(this.sessionIframe);\r\n                // this.init();\r\n            }\r\n            this._scheduledHeartBeat = setTimeout(_pollServerSessionRecur, 3000);\r\n        };\r\n\r\n        this.zone.runOutsideAngular(() => {\r\n            this._scheduledHeartBeat = setTimeout(_pollServerSessionRecur, 3000);\r\n        });\r\n    }\n/**\n * @param {?} e\n * @return {?}\n */\nprivate messageHandler(e: any) {\r\n        if (\r\n            this.sessionIframe &&\r\n            e.origin === this.authConfiguration.stsServer &&\r\n            e.source === this.sessionIframe.contentWindow\r\n        ) {\r\n            if (e.data === 'error') {\r\n                this.loggerService.logWarning(\r\n                    'error from checksession messageHandler'\r\n                );\r\n            } else if (e.data === 'changed') {\r\n                this.onCheckSessionChanged.emit();\r\n            } else {\r\n                this.loggerService.logDebug(\r\n                    e.data + ' from checksession messageHandler'\r\n                );\r\n            }\r\n        }\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AuthConfiguration, },\n{type: OidcSecurityCommon, },\n{type: LoggerService, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onCheckSessionChanged': [{ type: Output },],\n};\n}\n\nfunction OidcSecurityCheckSession_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcSecurityCheckSession.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcSecurityCheckSession.ctorParameters;\n/** @type {?} */\nOidcSecurityCheckSession.propDecorators;\n/** @type {?} */\nOidcSecurityCheckSession.prototype.sessionIframe;\n/** @type {?} */\nOidcSecurityCheckSession.prototype.iframeMessageEvent;\n/** @type {?} */\nOidcSecurityCheckSession.prototype.authWellKnownEndpoints;\n/** @type {?} */\nOidcSecurityCheckSession.prototype._scheduledHeartBeat;\n/** @type {?} */\nOidcSecurityCheckSession.prototype.onCheckSessionChanged;\n/** @type {?} */\nOidcSecurityCheckSession.prototype.authConfiguration;\n/** @type {?} */\nOidcSecurityCheckSession.prototype.oidcSecurityCommon;\n/** @type {?} */\nOidcSecurityCheckSession.prototype.loggerService;\n/** @type {?} */\nOidcSecurityCheckSession.prototype.zone;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { LoggerService } from './oidc.logger.service';\nexport class OidcSecuritySilentRenew {\nprivate sessionIframe: any;\n/**\n * @param {?} loggerService\n */\nconstructor(private loggerService: LoggerService) {}\n/**\n * @return {?}\n */\ninitRenew() {\r\n        let /** @type {?} */ existsparent = undefined;\r\n        try {\r\n            const /** @type {?} */ parentdoc = window.parent.document;\r\n            if (!parentdoc) {\r\n                throw new Error('Unaccessible');\r\n            }\r\n\r\n            existsparent = parentdoc.getElementById('myiFrameForSilentRenew');\r\n        } catch ( /** @type {?} */e) {\r\n            // not accessible\r\n        }\r\n        const /** @type {?} */ exists = window.document.getElementById('myiFrameForSilentRenew');\r\n        if (existsparent) {\r\n            this.sessionIframe = existsparent;\r\n        } else if (exists) {\r\n            this.sessionIframe = exists;\r\n        }\r\n\r\n        if (!exists && !existsparent) {\r\n            this.sessionIframe = window.document.createElement('iframe');\r\n            this.sessionIframe.id = 'myiFrameForSilentRenew';\r\n            this.loggerService.logDebug(this.sessionIframe);\r\n            this.sessionIframe.style.display = 'none';\r\n\r\n            window.document.body.appendChild(this.sessionIframe);\r\n        }\r\n    }\n/**\n * @param {?} url\n * @return {?}\n */\nstartRenew(url: string): Observable<any> {\r\n        let /** @type {?} */ existsparent = undefined;\r\n        try {\r\n            const /** @type {?} */ parentdoc = window.parent.document;\r\n            if (!parentdoc) {\r\n                throw new Error('Unaccessible');\r\n            }\r\n\r\n            existsparent = parentdoc.getElementById('myiFrameForSilentRenew');\r\n        } catch ( /** @type {?} */e) {\r\n            // not accessible\r\n        }\r\n        const /** @type {?} */ exists = window.document.getElementById('myiFrameForSilentRenew');\r\n        if (existsparent) {\r\n            this.sessionIframe = existsparent;\r\n        } else if (exists) {\r\n            this.sessionIframe = exists;\r\n        }\r\n\r\n        this.loggerService.logDebug('startRenew for URL:' + url);\r\n        this.sessionIframe.src = url;\r\n\r\n        return Observable.create((observer: Observer<any>) => {\r\n            this.sessionIframe.onload = () => {\r\n                observer.next(this);\r\n                observer.complete();\r\n            };\r\n        });\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LoggerService, },\n];\n}\n\nfunction OidcSecuritySilentRenew_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcSecuritySilentRenew.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcSecuritySilentRenew.ctorParameters;\n/** @type {?} */\nOidcSecuritySilentRenew.prototype.sessionIframe;\n/** @type {?} */\nOidcSecuritySilentRenew.prototype.loggerService;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nexport class OidcDataService {\n/**\n * @param {?} httpClient\n */\nconstructor(private httpClient: HttpClient) {}\n/**\n * @template T\n * @param {?} url\n * @return {?}\n */\ngetWellknownEndpoints<T>(url: string): Observable<T> {\n        let /** @type {?} */ headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n\n        return this.httpClient.get<T>(url, {\n            headers: headers\n        });\n    }\n/**\n * @template T\n * @param {?} url\n * @param {?} token\n * @return {?}\n */\ngetIdentityUserData<T>(url: string, token: string): Observable<T> {\n        let /** @type {?} */ headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n        headers = headers.set(\n            'Authorization',\n            'Bearer ' + decodeURIComponent(token)\n        );\n\n        return this.httpClient.get<T>(url, {\n            headers: headers\n        });\n    }\n/**\n * @template T\n * @param {?} url\n * @return {?}\n */\nget<T>(url: string): Observable<T> {\n        let /** @type {?} */ headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n\n        return this.httpClient.get<T>(url, {\n            headers: headers\n        });\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpClient, },\n];\n}\n\nfunction OidcDataService_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcDataService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcDataService.ctorParameters;\n/** @type {?} */\nOidcDataService.prototype.httpClient;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { map } from 'rxjs/operators';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { OidcDataService } from './oidc-data.service';\r\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\nexport class OidcSecurityUserService {\nprivate userData: any = '';\nprivate authWellKnownEndpoints: AuthWellKnownEndpoints;\n/**\n * @param {?} oidcDataService\n * @param {?} oidcSecurityCommon\n */\nconstructor(\nprivate oidcDataService: OidcDataService,\nprivate oidcSecurityCommon: OidcSecurityCommon,\r\n    ) { }\n/**\n * @param {?} authWellKnownEndpoints\n * @return {?}\n */\nsetupModule(authWellKnownEndpoints: AuthWellKnownEndpoints) {\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\n    }\n/**\n * @return {?}\n */\ninitUserData() {\r\n        return this.getIdentityUserData().pipe(\r\n            map((data: any) => (this.userData = data))\r\n        );\r\n    }\n/**\n * @return {?}\n */\ngetUserData(): any {\r\n        if (!this.userData) {\r\n            throw Error('UserData is not set!');\r\n        }\r\n\r\n        return this.userData;\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\nsetUserData(value: any): void {\r\n        this.userData = value;\r\n    }\n/**\n * @return {?}\n */\nprivate getIdentityUserData(): Observable<any> {\r\n        const /** @type {?} */ token = this.oidcSecurityCommon.getAccessToken();\r\n\r\n        return this.oidcDataService.getIdentityUserData(\r\n            this.authWellKnownEndpoints.userinfo_endpoint,\r\n            token\r\n        );\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: OidcDataService, },\n{type: OidcSecurityCommon, },\n];\n}\n\nfunction OidcSecurityUserService_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcSecurityUserService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcSecurityUserService.ctorParameters;\n/** @type {?} */\nOidcSecurityUserService.prototype.userData;\n/** @type {?} */\nOidcSecurityUserService.prototype.authWellKnownEndpoints;\n/** @type {?} */\nOidcSecurityUserService.prototype.oidcDataService;\n/** @type {?} */\nOidcSecurityUserService.prototype.oidcSecurityCommon;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { HttpParameterCodec } from '@angular/common/http';\nexport class UriEncoder implements HttpParameterCodec {\n/**\n * @param {?} key\n * @return {?}\n */\nencodeKey(key: string): string {\n        return encodeURIComponent(key);\n    }\n/**\n * @param {?} value\n * @return {?}\n */\nencodeValue(value: string): string {\n        return encodeURIComponent(value);\n    }\n/**\n * @param {?} key\n * @return {?}\n */\ndecodeKey(key: string): string {\n        return decodeURIComponent(key);\n    }\n/**\n * @param {?} value\n * @return {?}\n */\ndecodeValue(value: string): string {\n        return decodeURIComponent(value);\n    }\n}\n","import { isPlatformBrowser } from '@angular/common';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { Inject, PLATFORM_ID, NgZone } from '@angular/core';\r\nimport { EventEmitter, Injectable, Output } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { AuthorizationResult } from '../models/authorization-result.enum';\r\nimport { JwtKeys } from '../models/jwtkeys';\r\nimport { ValidateStateResult } from '../models/validate-state-result.model';\r\nimport {\r\n    AuthConfiguration,\r\n    OpenIDImplicitFlowConfiguration\r\n} from '../modules/auth.configuration';\r\nimport { StateValidationService } from './oidc-security-state-validation.service';\r\nimport { OidcSecurityCheckSession } from './oidc.security.check-session';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { OidcSecuritySilentRenew } from './oidc.security.silent-renew';\r\nimport { OidcSecurityUserService } from './oidc.security.user-service';\r\nimport { OidcSecurityValidation } from './oidc.security.validation';\r\nimport { UriEncoder } from './uri-encoder';\r\nimport { OidcDataService } from './oidc-data.service';\r\nimport { TokenHelperService } from './oidc-token-helper.service';\r\nimport { LoggerService } from './oidc.logger.service';\r\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\nexport class OidcSecurityService {\r\n     onModuleSetup = new EventEmitter<boolean>();\r\n     onAuthorizationResult = new EventEmitter<AuthorizationResult>();\r\n     onCheckSessionChanged = new EventEmitter<boolean>();\r\n\r\n    checkSessionChanged: boolean;\r\n    moduleSetup = false;\nprivate authWellKnownEndpoints: AuthWellKnownEndpoints;\nprivate _isAuthorized = new BehaviorSubject<boolean>(false);\nprivate _isAuthorizedValue: boolean;\nprivate lastUserData: any;\nprivate _userData = new BehaviorSubject<any>('');\nprivate authWellKnownEndpointsLoaded = false;\nprivate runTokenValidationRunning: boolean;\nprivate _scheduledHeartBeat: any;\nprivate boundSilentRenewEvent: any;\n/**\n * @param {?} platformId\n * @param {?} oidcDataService\n * @param {?} stateValidationService\n * @param {?} authConfiguration\n * @param {?} router\n * @param {?} oidcSecurityCheckSession\n * @param {?} oidcSecuritySilentRenew\n * @param {?} oidcSecurityUserService\n * @param {?} oidcSecurityCommon\n * @param {?} oidcSecurityValidation\n * @param {?} tokenHelperService\n * @param {?} loggerService\n * @param {?} zone\n */\nconstructor(\nprivate platformId: Object,\nprivate oidcDataService: OidcDataService,\nprivate stateValidationService: StateValidationService,\nprivate authConfiguration: AuthConfiguration,\nprivate router: Router,\nprivate oidcSecurityCheckSession: OidcSecurityCheckSession,\nprivate oidcSecuritySilentRenew: OidcSecuritySilentRenew,\nprivate oidcSecurityUserService: OidcSecurityUserService,\nprivate oidcSecurityCommon: OidcSecurityCommon,\nprivate oidcSecurityValidation: OidcSecurityValidation,\nprivate tokenHelperService: TokenHelperService,\nprivate loggerService: LoggerService,\nprivate zone: NgZone\r\n    ) {}\n/**\n * @param {?} openIDImplicitFlowConfiguration\n * @param {?} authWellKnownEndpoints\n * @return {?}\n */\nsetupModule(\r\n        openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration,\r\n        authWellKnownEndpoints: AuthWellKnownEndpoints\r\n    ): void {\r\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\r\n        this.authConfiguration.init(openIDImplicitFlowConfiguration);\r\n        this.stateValidationService.setupModule(authWellKnownEndpoints);\r\n        this.oidcSecurityCheckSession.setupModule(authWellKnownEndpoints);\r\n        this.oidcSecurityUserService.setupModule(authWellKnownEndpoints);\r\n\r\n        this.oidcSecurityCheckSession.onCheckSessionChanged.subscribe(() => {\r\n            this.loggerService.logDebug('onCheckSessionChanged');\r\n            this.checkSessionChanged = true;\r\n            this.onCheckSessionChanged.emit(\r\n                this.checkSessionChanged\r\n            );\r\n        });\r\n\r\n        this._userData.subscribe(() => {\r\n            this.onUserDataChanged();\r\n        });\r\n\r\n        const /** @type {?} */ userData = this.oidcSecurityCommon.userData;\r\n        if (userData) {\r\n            this.setUserData(userData);\r\n        }\r\n\r\n        const /** @type {?} */ isAuthorized = this.oidcSecurityCommon.isAuthorized;\r\n        if (isAuthorized) {\r\n            this.loggerService.logDebug('IsAuthorized setup module');\r\n            this.loggerService.logDebug(this.oidcSecurityCommon.idToken);\r\n            if (this.oidcSecurityValidation.isTokenExpired(\r\n                    this.oidcSecurityCommon.idToken,\r\n                    this.authConfiguration.silent_renew_offset_in_seconds)\r\n            ) {\r\n                this.loggerService.logDebug('IsAuthorized setup module; id_token isTokenExpired');\r\n            } else {\r\n                this.loggerService.logDebug('IsAuthorized setup module; id_token is valid');\r\n                this.setIsAuthorized(isAuthorized);\r\n                this.runTokenValidation();\r\n            }\r\n        }\r\n\r\n        this.loggerService.logDebug(\r\n            'STS server: ' + this.authConfiguration.stsServer\r\n        );\r\n\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            // Client only code.\r\n            this.moduleSetup = true;\r\n            this.onModuleSetup.emit();\r\n\r\n            if (this.authConfiguration.silent_renew) {\r\n                this.oidcSecuritySilentRenew.initRenew();\r\n\r\n                // Support authorization via DOM events.\r\n                this.boundSilentRenewEvent =  this.silentRenewEventHandler.bind(this);\r\n                window.addEventListener('oidc-silent-renew-message', this.boundSilentRenewEvent, false);\r\n            }\r\n\r\n            if (\r\n                this.authConfiguration.start_checksession &&\r\n                !this.oidcSecurityCheckSession.doesSessionExist()\r\n            ) {\r\n                this.oidcSecurityCheckSession.init().subscribe(() => {\r\n                    this.oidcSecurityCheckSession.pollServerSession(\r\n                        this.authConfiguration.client_id\r\n                    );\r\n                });\r\n            }\r\n        } else {\r\n            this.moduleSetup = true;\r\n            this.onModuleSetup.emit();\r\n        }\r\n    }\n/**\n * @return {?}\n */\ngetUserData(): Observable<any> {\r\n        return this._userData.asObservable();\r\n    }\n/**\n * @return {?}\n */\ngetIsAuthorized(): Observable<boolean> {\r\n        return this._isAuthorized.asObservable();\r\n    }\n/**\n * @return {?}\n */\ngetToken(): string {\r\n        if (!this._isAuthorizedValue) {\r\n            return '';\r\n        }\r\n\r\n        const /** @type {?} */ token = this.oidcSecurityCommon.getAccessToken();\r\n        return decodeURIComponent(token);\r\n    }\n/**\n * @return {?}\n */\ngetIdToken(): string {\r\n        if (!this._isAuthorizedValue) {\r\n            return '';\r\n        }\r\n\r\n        const /** @type {?} */ token = this.oidcSecurityCommon.getIdToken();\r\n        return decodeURIComponent(token);\r\n    }\n/**\n * @param {?=} encode\n * @return {?}\n */\ngetPayloadFromIdToken(encode = false): any {\r\n        const /** @type {?} */ token = this.getIdToken();\r\n        return this.tokenHelperService.getPayloadFromToken(token, encode);\r\n    }\n/**\n * @param {?} state\n * @return {?}\n */\nsetState(state: string): void {\r\n        this.oidcSecurityCommon.authStateControl = state;\r\n    }\n/**\n * @return {?}\n */\ngetState(): string {\r\n        return this.oidcSecurityCommon.authStateControl;\r\n    }\n/**\n * @param {?} params\n * @return {?}\n */\nsetCustomRequestParameters(params: {\r\n        [key: string]: string | number | boolean;\r\n    }) {\r\n        this.oidcSecurityCommon.customRequestParams = params;\r\n    }\n/**\n * @param {?=} urlHandler\n * @return {?}\n */\nauthorize(urlHandler?: (url: string) => any) {\r\n        if (this.authWellKnownEndpoints) {\r\n            this.authWellKnownEndpointsLoaded = true;\r\n        }\r\n\r\n        if (!this.authWellKnownEndpointsLoaded) {\r\n            this.loggerService.logError(\r\n                'Well known endpoints must be loaded before user can login!'\r\n            );\r\n            return;\r\n        }\r\n\r\n        if (\r\n            !this.oidcSecurityValidation.config_validate_response_type(\r\n                this.authConfiguration.response_type\r\n            )\r\n        ) {\r\n            // invalid response_type\r\n            return;\r\n        }\r\n\r\n        this.resetAuthorizationData(false);\r\n\r\n        this.loggerService.logDebug('BEGIN Authorize, no auth data');\r\n\r\n        let /** @type {?} */ state = this.oidcSecurityCommon.authStateControl;\r\n        if (!state) {\r\n            state = Date.now() + '' + Math.random();\r\n            this.oidcSecurityCommon.authStateControl = state;\r\n        }\r\n\r\n        const /** @type {?} */ nonce = 'N' + Math.random() + '' + Date.now();\r\n        this.oidcSecurityCommon.authNonce = nonce;\r\n        this.loggerService.logDebug(\r\n            'AuthorizedController created. local state: ' +\r\n                this.oidcSecurityCommon.authStateControl\r\n        );\r\n\r\n        const /** @type {?} */ url = this.createAuthorizeUrl(\r\n            this.authConfiguration.redirect_url,\r\n            nonce,\r\n            state,\r\n            this.authWellKnownEndpoints.authorization_endpoint\r\n        );\r\n        if (urlHandler) {\r\n            urlHandler(url);\r\n        } else {\r\n            window.location.href = url;\r\n        }\r\n    }\n/**\n * @param {?=} hash\n * @return {?}\n */\nauthorizedCallback(hash?: string) {\r\n        const /** @type {?} */ silentRenew = this.oidcSecurityCommon.silentRenewRunning;\r\n        const /** @type {?} */ isRenewProcess = silentRenew === 'running';\r\n\r\n        this.loggerService.logDebug('BEGIN authorizedCallback, no auth data');\r\n        this.resetAuthorizationData(isRenewProcess);\r\n\r\n        hash = hash || window.location.hash.substr(1);\r\n\r\n        const /** @type {?} */ result: any = hash\r\n            .split('&')\r\n            .reduce(function(resultData: any, item: string) {\r\n                const /** @type {?} */ parts = item.split('=');\r\n                resultData[parts[0]] = parts[1];\r\n                return resultData;\r\n            }, {});\r\n\r\n        this.oidcSecurityCommon.authResult = result;\r\n        this.loggerService.logDebug(result);\r\n        this.loggerService.logDebug(\r\n            'authorizedCallback created, begin token validation'\r\n        );\r\n\r\n        this.getSigningKeys().subscribe(jwtKeys => {\r\n            const /** @type {?} */ validationResult = this.getValidatedStateResult(\r\n                result,\r\n                jwtKeys\r\n            );\r\n\r\n            if (validationResult.authResponseIsValid) {\r\n                this.setAuthorizationData(\r\n                    validationResult.access_token,\r\n                    validationResult.id_token\r\n                );\r\n                this.oidcSecurityCommon.silentRenewRunning = '';\r\n\r\n                if (this.authConfiguration.auto_userinfo) {\r\n                    this.getUserinfo(\r\n                        isRenewProcess,\r\n                        result,\r\n                        validationResult.id_token,\r\n                        validationResult.decoded_id_token\r\n                    ).subscribe(response => {\r\n                        if (response) {\r\n                            this.onAuthorizationResult.emit(AuthorizationResult.authorized);\r\n                            if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                                this.router.navigate([\r\n                                    this.authConfiguration.post_login_route\r\n                                ]);\r\n                            }\r\n                        } else {\r\n                            this.onAuthorizationResult.emit(AuthorizationResult.unauthorized);\r\n                            if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                                this.router.navigate([\r\n                                    this.authConfiguration.unauthorized_route\r\n                                ]);\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n                    if (!isRenewProcess) {\r\n                        // userData is set to the id_token decoded, auto get user data set to false\r\n                        this.oidcSecurityUserService.setUserData(\r\n                            validationResult.decoded_id_token\r\n                        );\r\n                        this.setUserData(\r\n                            this.oidcSecurityUserService.getUserData()\r\n                        );\r\n                        this.runTokenValidation();\r\n                    }\r\n\r\n                    this.onAuthorizationResult.emit(AuthorizationResult.authorized);\r\n                    if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                        this.router.navigate([\r\n                            this.authConfiguration.post_login_route\r\n                        ]);\r\n                    }\r\n                }\r\n            } else {\r\n                // something went wrong\r\n                this.loggerService.logWarning(\r\n                    'authorizedCallback, token(s) validation failed, resetting'\r\n                );\r\n                this.loggerService.logWarning(window.location.hash);\r\n                this.resetAuthorizationData(false);\r\n                this.oidcSecurityCommon.silentRenewRunning = '';\r\n\r\n                this.onAuthorizationResult.emit(AuthorizationResult.unauthorized);\r\n                if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                    this.router.navigate([\r\n                        this.authConfiguration.unauthorized_route\r\n                    ]);\r\n                }\r\n            }\r\n        }, (err) => {\r\n            /* Something went wrong while getting signing key */\r\n            this.loggerService.logWarning(\r\n                'Failed to retreive siging key with error: ' + JSON.stringify(err)\r\n            );\r\n            this.oidcSecurityCommon.silentRenewRunning = '';\r\n        });\r\n    }\n/**\n * @param {?=} isRenewProcess\n * @param {?=} result\n * @param {?=} id_token\n * @param {?=} decoded_id_token\n * @return {?}\n */\ngetUserinfo(\r\n        isRenewProcess = false,\r\n        result?: any,\r\n        id_token?: any,\r\n        decoded_id_token?: any\r\n    ): Observable<boolean> {\r\n        result = result ? result : this.oidcSecurityCommon.authResult;\r\n        id_token = id_token ? id_token : this.oidcSecurityCommon.idToken;\r\n        decoded_id_token = decoded_id_token\r\n            ? decoded_id_token\r\n            : this.tokenHelperService.getPayloadFromToken(id_token, false);\r\n\r\n        return new Observable<boolean>(observer => {\r\n            // flow id_token token\r\n            if (this.authConfiguration.response_type === 'id_token token') {\r\n                if (isRenewProcess) {\r\n                    this.oidcSecurityCommon.sessionState = result.session_state;\r\n                    observer.next(true);\r\n                    observer.complete();\r\n                } else {\r\n                    this.oidcSecurityUserService\r\n                        .initUserData()\r\n                        .subscribe(() => {\r\n                            this.loggerService.logDebug(\r\n                                'authorizedCallback id_token token flow'\r\n                            );\r\n\r\n                            const /** @type {?} */ userData = this.oidcSecurityUserService.getUserData();\r\n\r\n                            if (\r\n                                this.oidcSecurityValidation.validate_userdata_sub_id_token(\r\n                                    decoded_id_token.sub,\r\n                                    userData.sub\r\n                                )\r\n                            ) {\r\n                                this.setUserData(userData);\r\n                                this.loggerService.logDebug(\r\n                                    this.oidcSecurityCommon.accessToken\r\n                                );\r\n                                this.loggerService.logDebug(\r\n                                    this.oidcSecurityUserService.getUserData()\r\n                                );\r\n\r\n                                this.oidcSecurityCommon.sessionState =\r\n                                    result.session_state;\r\n\r\n                                this.runTokenValidation();\r\n                                observer.next(true);\r\n                            } else {\r\n                                // something went wrong, userdata sub does not match that from id_token\r\n                                this.loggerService.logWarning(\r\n                                    'authorizedCallback, User data sub does not match sub in id_token'\r\n                                );\r\n                                this.loggerService.logDebug(\r\n                                    'authorizedCallback, token(s) validation failed, resetting'\r\n                                );\r\n                                this.resetAuthorizationData(false);\r\n                                observer.next(false);\r\n                            }\r\n                            observer.complete();\r\n                        });\r\n                }\r\n            } else {\r\n                // flow id_token\r\n                this.loggerService.logDebug('authorizedCallback id_token flow');\r\n                this.loggerService.logDebug(\r\n                    this.oidcSecurityCommon.accessToken\r\n                );\r\n\r\n                // userData is set to the id_token decoded. No access_token.\r\n                this.oidcSecurityUserService.setUserData(decoded_id_token);\r\n                this.setUserData(this.oidcSecurityUserService.getUserData());\r\n\r\n                this.oidcSecurityCommon.sessionState = result.session_state;\r\n\r\n                if (!isRenewProcess) {\r\n                    this.runTokenValidation();\r\n                }\r\n\r\n                observer.next(true);\r\n                observer.complete();\r\n            }\r\n        });\r\n    }\n/**\n * @return {?}\n */\nlogoff() {\r\n        // /connect/endsession?id_token_hint=...&post_logout_redirect_uri=https://myapp.com\r\n        this.loggerService.logDebug('BEGIN Authorize, no auth data');\r\n\r\n        if (this.authWellKnownEndpoints.end_session_endpoint) {\r\n            const /** @type {?} */ end_session_endpoint = this.authWellKnownEndpoints\r\n                .end_session_endpoint;\r\n            const /** @type {?} */ id_token_hint = this.oidcSecurityCommon.idToken;\r\n            const /** @type {?} */ url = this.createEndSessionUrl(\r\n                end_session_endpoint,\r\n                id_token_hint\r\n            );\r\n\r\n            this.resetAuthorizationData(false);\r\n\r\n            if (\r\n                this.authConfiguration.start_checksession &&\r\n                this.checkSessionChanged\r\n            ) {\r\n                this.loggerService.logDebug(\r\n                    'only local login cleaned up, server session has changed'\r\n                );\r\n            } else {\r\n                window.location.href = url;\r\n            }\r\n        } else {\r\n            this.resetAuthorizationData(false);\r\n            this.loggerService.logDebug(\r\n                'only local login cleaned up, no end_session_endpoint'\r\n            );\r\n        }\r\n    }\n/**\n * @return {?}\n */\nrefreshSession(): Observable<any> {\r\n        this.loggerService.logDebug('BEGIN refresh session Authorize');\r\n\r\n        let /** @type {?} */ state = this.oidcSecurityCommon.authStateControl;\r\n        if (state === '' || state === null) {\r\n            state = Date.now() + '' + Math.random();\r\n            this.oidcSecurityCommon.authStateControl = state;\r\n        }\r\n\r\n        const /** @type {?} */ nonce = 'N' + Math.random() + '' + Date.now();\r\n        this.oidcSecurityCommon.authNonce = nonce;\r\n        this.loggerService.logDebug(\r\n            'RefreshSession created. adding myautostate: ' +\r\n                this.oidcSecurityCommon.authStateControl\r\n        );\r\n\r\n        const /** @type {?} */ url = this.createAuthorizeUrl(\r\n            this.authConfiguration.silent_redirect_url,\r\n            nonce,\r\n            state,\r\n            this.authWellKnownEndpoints.authorization_endpoint,\r\n            'none'\r\n        );\r\n\r\n        this.oidcSecurityCommon.silentRenewRunning = 'running';\r\n        return this.oidcSecuritySilentRenew.startRenew(url);\r\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nhandleError(error: any) {\r\n        this.loggerService.logError(error);\r\n        if (error.status === 403 || error.status === '403') {\r\n            if (this.authConfiguration.trigger_authorization_result_event) {\r\n                this.onAuthorizationResult.emit(\r\n                    AuthorizationResult.unauthorized\r\n                );\r\n            } else {\r\n                this.router.navigate([this.authConfiguration.forbidden_route]);\r\n            }\r\n        } else if (error.status === 401 || error.status === '401') {\r\n            const /** @type {?} */ silentRenew = this.oidcSecurityCommon.silentRenewRunning;\r\n\r\n            this.resetAuthorizationData(!!silentRenew);\r\n\r\n            if (this.authConfiguration.trigger_authorization_result_event) {\r\n                this.onAuthorizationResult.emit(\r\n                    AuthorizationResult.unauthorized\r\n                );\r\n            } else {\r\n                this.router.navigate([\r\n                    this.authConfiguration.unauthorized_route\r\n                ]);\r\n            }\r\n        }\r\n    }\n/**\n * @return {?}\n */\nstartCheckingSilentRenew(): void {\r\n        this.runTokenValidation();\r\n    }\n/**\n * @return {?}\n */\nstopCheckingSilentRenew(): void {\r\n        if (this._scheduledHeartBeat) {\r\n            clearTimeout(this._scheduledHeartBeat);\r\n            this._scheduledHeartBeat = null;\r\n            this.runTokenValidationRunning = false;\r\n        }\r\n    }\n/**\n * @param {?} result\n * @param {?} jwtKeys\n * @return {?}\n */\nprivate getValidatedStateResult(\r\n        result: any,\r\n        jwtKeys: JwtKeys\r\n    ): ValidateStateResult {\r\n        if (result.error) {\r\n            return new ValidateStateResult('', '', false, {});\r\n        }\r\n\r\n        return this.stateValidationService.validateState(result, jwtKeys);\r\n    }\n/**\n * @param {?} userData\n * @return {?}\n */\nprivate setUserData(userData: any): void {\r\n        this.oidcSecurityCommon.userData = userData;\r\n        this._userData.next(userData);\r\n    }\n/**\n * @param {?} isAuthorized\n * @return {?}\n */\nprivate setIsAuthorized(isAuthorized: boolean): void {\r\n        this._isAuthorizedValue = isAuthorized;\r\n        this._isAuthorized.next(isAuthorized);\r\n    }\n/**\n * @param {?} access_token\n * @param {?} id_token\n * @return {?}\n */\nprivate setAuthorizationData(access_token: any, id_token: any) {\r\n        if (this.oidcSecurityCommon.accessToken !== '') {\r\n            this.oidcSecurityCommon.accessToken = '';\r\n        }\r\n\r\n        this.loggerService.logDebug(access_token);\r\n        this.loggerService.logDebug(id_token);\r\n        this.loggerService.logDebug('storing to storage, getting the roles');\r\n        this.oidcSecurityCommon.accessToken = access_token;\r\n        this.oidcSecurityCommon.idToken = id_token;\r\n        this.setIsAuthorized(true);\r\n        this.oidcSecurityCommon.isAuthorized = true;\r\n    }\n/**\n * @param {?} redirect_url\n * @param {?} nonce\n * @param {?} state\n * @param {?} authorization_endpoint\n * @param {?=} prompt\n * @return {?}\n */\nprivate createAuthorizeUrl(\r\n        redirect_url: string,\r\n        nonce: string,\r\n        state: string,\r\n        authorization_endpoint: string,\r\n        prompt?: string\r\n    ): string {\r\n        const /** @type {?} */ urlParts = authorization_endpoint.split('?');\r\n        const /** @type {?} */ authorizationUrl = urlParts[0];\r\n        let /** @type {?} */ params = new HttpParams({\r\n            fromString: urlParts[1],\r\n            encoder: new UriEncoder()\r\n        });\r\n        params = params.set('client_id', this.authConfiguration.client_id);\r\n        params = params.append(\r\n            'redirect_uri',\r\n            redirect_url\r\n        );\r\n        params = params.append(\r\n            'response_type',\r\n            this.authConfiguration.response_type\r\n        );\r\n        params = params.append('scope', this.authConfiguration.scope);\r\n        params = params.append('nonce', nonce);\r\n        params = params.append('state', state);\r\n\r\n        if (prompt) {\r\n            params = params.append('prompt', prompt);\r\n        }\r\n\r\n        if (this.authConfiguration.hd_param) {\r\n            params = params.append('hd', this.authConfiguration.hd_param);\r\n        }\r\n\r\n        const /** @type {?} */ customParams = Object.assign(\r\n            {},\r\n            this.oidcSecurityCommon.customRequestParams\r\n        );\r\n\r\n        Object.keys(customParams).forEach(key => {\r\n            params = params.append(key, customParams[key].toString());\r\n        });\r\n\r\n        return `${authorizationUrl}?${params}`;\r\n    }\n/**\n * @param {?} end_session_endpoint\n * @param {?} id_token_hint\n * @return {?}\n */\nprivate createEndSessionUrl(\r\n        end_session_endpoint: string,\r\n        id_token_hint: string\r\n    ) {\r\n        const /** @type {?} */ urlParts = end_session_endpoint.split('?');\r\n\r\n        const /** @type {?} */ authorizationEndsessionUrl = urlParts[0];\r\n\r\n        let /** @type {?} */ params = new HttpParams({\r\n            fromString: urlParts[1],\r\n            encoder: new UriEncoder()\r\n        });\r\n        params = params.set('id_token_hint', id_token_hint);\r\n        params = params.append(\r\n            'post_logout_redirect_uri',\r\n            this.authConfiguration.post_logout_redirect_uri\r\n        );\r\n\r\n        return `${authorizationEndsessionUrl}?${params}`;\r\n    }\n/**\n * @param {?} isRenewProcess\n * @return {?}\n */\nprivate resetAuthorizationData(isRenewProcess: boolean) {\r\n        if (!isRenewProcess) {\r\n            if (this.authConfiguration.auto_userinfo) {\r\n                // Clear user data. Fixes #97.\r\n                this.setUserData('');\r\n            }\r\n            this.setIsAuthorized(false);\r\n            this.oidcSecurityCommon.resetStorageData(isRenewProcess);\r\n            this.checkSessionChanged = false;\r\n        }\r\n    }\n/**\n * @return {?}\n */\nprivate onUserDataChanged() {\r\n        this.loggerService.logDebug(\r\n            `onUserDataChanged: last = ${this.lastUserData}, new = ${\r\n                this._userData.value\r\n            }`\r\n        );\r\n\r\n        if (this.lastUserData && !this._userData.value) {\r\n            this.loggerService.logDebug('onUserDataChanged: Logout detected.');\r\n            // TODO should we have an action here\r\n        }\r\n        this.lastUserData = this._userData.value;\r\n    }\n/**\n * @return {?}\n */\nprivate getSigningKeys(): Observable<JwtKeys> {\r\n        this.loggerService.logDebug(\r\n            'jwks_uri: ' + this.authWellKnownEndpoints.jwks_uri\r\n        );\r\n        return this.oidcDataService\r\n            .get<JwtKeys>(this.authWellKnownEndpoints.jwks_uri)\r\n            .pipe(catchError(this.handleErrorGetSigningKeys));\r\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate handleErrorGetSigningKeys(error: Response | any) {\r\n        let /** @type {?} */ errMsg: string;\r\n        if (error instanceof Response) {\r\n            const /** @type {?} */ body = error.json() || {};\r\n            const /** @type {?} */ err = JSON.stringify(body);\r\n            errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\r\n        } else {\r\n            errMsg = error.message ? error.message : error.toString();\r\n        }\r\n        console.error(errMsg);\r\n        return Observable.throw(errMsg);\r\n    }\n/**\n * @return {?}\n */\nprivate runTokenValidation() {\r\n        if (this.runTokenValidationRunning) {\r\n            return;\r\n        }\r\n        this.runTokenValidationRunning = true;\n/**\n * First time: delay 10 seconds to call silentRenewHeartBeatCheck\rAfterwards: Run this check in a 5 second interval only AFTER the previous operation ends.\n */\nconst silentRenewHeartBeatCheck = () => {\r\n            if (this._userData.value && (this.oidcSecurityCommon.silentRenewRunning !== 'running') && this.getIdToken()) {\r\n                if (this.oidcSecurityValidation.isTokenExpired(\r\n                    this.oidcSecurityCommon.idToken,\r\n                    this.authConfiguration.silent_renew_offset_in_seconds\r\n                )\r\n                ) {\r\n                    this.loggerService.logDebug(\r\n                        'IsAuthorized: id_token isTokenExpired, start silent renew if active'\r\n                    );\r\n\r\n                    if (this.authConfiguration.silent_renew) {\r\n                        this.refreshSession().subscribe(() => {\r\n                            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\r\n                        }, (err: any) => {\r\n                            this.loggerService.logError('Error: ' + err);\r\n                            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\r\n                        });\r\n                        /* In this situation, we schedule a heatbeat check only when silentRenew is finished.\r\n                        We don't want to schedule another check so we have to return here */\r\n                        return;\r\n                    } else {\r\n                        this.resetAuthorizationData(false);\r\n                    }\r\n                }\r\n            }\r\n\r\n            /* Delay 3 seconds and do the next check */\r\n            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\r\n        };\r\n\r\n        this.zone.runOutsideAngular(() => {\r\n            /* Initial heartbeat check */\r\n            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 10000);\r\n        });\r\n    }\n/**\n * @param {?} e\n * @return {?}\n */\nprivate silentRenewEventHandler(e: CustomEvent) {\r\n        this.loggerService.logDebug('silentRenewEventHandler');\r\n        this.authorizedCallback(e.detail);\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID, ] }, ]},\n{type: OidcDataService, },\n{type: StateValidationService, },\n{type: AuthConfiguration, },\n{type: Router, },\n{type: OidcSecurityCheckSession, },\n{type: OidcSecuritySilentRenew, },\n{type: OidcSecurityUserService, },\n{type: OidcSecurityCommon, },\n{type: OidcSecurityValidation, },\n{type: TokenHelperService, },\n{type: LoggerService, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onModuleSetup': [{ type: Output },],\n'onAuthorizationResult': [{ type: Output },],\n'onCheckSessionChanged': [{ type: Output },],\n};\n}\n\nfunction OidcSecurityService_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcSecurityService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcSecurityService.ctorParameters;\n/** @type {?} */\nOidcSecurityService.propDecorators;\n/** @type {?} */\nOidcSecurityService.prototype.onModuleSetup;\n/** @type {?} */\nOidcSecurityService.prototype.onAuthorizationResult;\n/** @type {?} */\nOidcSecurityService.prototype.onCheckSessionChanged;\n/** @type {?} */\nOidcSecurityService.prototype.checkSessionChanged;\n/** @type {?} */\nOidcSecurityService.prototype.moduleSetup;\n/** @type {?} */\nOidcSecurityService.prototype.authWellKnownEndpoints;\n/** @type {?} */\nOidcSecurityService.prototype._isAuthorized;\n/** @type {?} */\nOidcSecurityService.prototype._isAuthorizedValue;\n/** @type {?} */\nOidcSecurityService.prototype.lastUserData;\n/** @type {?} */\nOidcSecurityService.prototype._userData;\n/** @type {?} */\nOidcSecurityService.prototype.authWellKnownEndpointsLoaded;\n/** @type {?} */\nOidcSecurityService.prototype.runTokenValidationRunning;\n/** @type {?} */\nOidcSecurityService.prototype._scheduledHeartBeat;\n/** @type {?} */\nOidcSecurityService.prototype.boundSilentRenewEvent;\n/** @type {?} */\nOidcSecurityService.prototype.platformId;\n/** @type {?} */\nOidcSecurityService.prototype.oidcDataService;\n/** @type {?} */\nOidcSecurityService.prototype.stateValidationService;\n/** @type {?} */\nOidcSecurityService.prototype.authConfiguration;\n/** @type {?} */\nOidcSecurityService.prototype.router;\n/** @type {?} */\nOidcSecurityService.prototype.oidcSecurityCheckSession;\n/** @type {?} */\nOidcSecurityService.prototype.oidcSecuritySilentRenew;\n/** @type {?} */\nOidcSecurityService.prototype.oidcSecurityUserService;\n/** @type {?} */\nOidcSecurityService.prototype.oidcSecurityCommon;\n/** @type {?} */\nOidcSecurityService.prototype.oidcSecurityValidation;\n/** @type {?} */\nOidcSecurityService.prototype.tokenHelperService;\n/** @type {?} */\nOidcSecurityService.prototype.loggerService;\n/** @type {?} */\nOidcSecurityService.prototype.zone;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nexport class AuthWellKnownEndpoints {\r\n\r\n    issuer: string;\r\n    jwks_uri: string;\r\n    authorization_endpoint: string;\r\n    token_endpoint: string;\r\n    userinfo_endpoint: string;\r\n    end_session_endpoint: string;\r\n    check_session_iframe: string;\r\n    revocation_endpoint: string;\r\n    introspection_endpoint: string;\n/**\n * @param {?} data\n * @return {?}\n */\npublic setWellKnownEndpoints(data: any) {\r\n        this.issuer = data.issuer;\r\n        this.jwks_uri = data.jwks_uri;\r\n        this.authorization_endpoint = data.authorization_endpoint;\r\n        this.token_endpoint = data.token_endpoint;\r\n        this.userinfo_endpoint = data.userinfo_endpoint;\r\n\r\n        if (data.end_session_endpoint) {\r\n            this.end_session_endpoint = data.end_session_endpoint;\r\n        }\r\n\r\n        if (data.check_session_iframe) {\r\n            this.check_session_iframe = data.check_session_iframe;\r\n        }\r\n\r\n        if (data.revocation_endpoint) {\r\n            this.revocation_endpoint = data.revocation_endpoint;\r\n        }\r\n\r\n        if (data.introspection_endpoint) {\r\n            this.introspection_endpoint = data.introspection_endpoint;\r\n        }\r\n    }\r\n}\n\nfunction AuthWellKnownEndpoints_tsickle_Closure_declarations() {\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.issuer;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.jwks_uri;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.authorization_endpoint;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.token_endpoint;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.userinfo_endpoint;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.end_session_endpoint;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.check_session_iframe;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.revocation_endpoint;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.introspection_endpoint;\n}\n\r\n","\nexport class JwtKeys {\n    keys: JwtKey[];\n}\n\nfunction JwtKeys_tsickle_Closure_declarations() {\n/** @type {?} */\nJwtKeys.prototype.keys;\n}\n\nexport class JwtKey {\n    kty: string;\n    use: string;\n    kid: string;\n    x5t: string;\n    e: string;\n    n: string;\n    x5c: any[];\n}\n\nfunction JwtKey_tsickle_Closure_declarations() {\n/** @type {?} */\nJwtKey.prototype.kty;\n/** @type {?} */\nJwtKey.prototype.use;\n/** @type {?} */\nJwtKey.prototype.kid;\n/** @type {?} */\nJwtKey.prototype.x5t;\n/** @type {?} */\nJwtKey.prototype.e;\n/** @type {?} */\nJwtKey.prototype.n;\n/** @type {?} */\nJwtKey.prototype.x5c;\n}\n","import { ArrayHelperService } from '../services/oidc-array-helper.service';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { OidcSecurityService } from '../services/oidc.security.service';\nimport { AuthConfiguration, DefaultConfiguration } from './auth.configuration';\nimport { OidcSecurityValidation } from '../services/oidc.security.validation';\nimport { OidcSecurityCheckSession } from '../services/oidc.security.check-session';\nimport { OidcSecuritySilentRenew } from '../services/oidc.security.silent-renew';\nimport { OidcSecurityUserService } from '../services/oidc.security.user-service';\nimport { OidcSecurityCommon } from '../services/oidc.security.common';\nimport {\n    OidcSecurityStorage,\n    BrowserStorage\n} from '../services/oidc.security.storage';\nimport { StateValidationService } from '../services/oidc-security-state-validation.service';\nimport { OidcDataService } from '../services/oidc-data.service';\nimport { TokenHelperService } from '../services/oidc-token-helper.service';\nimport { LoggerService } from '../services/oidc.logger.service';\nimport { OidcConfigService } from '../services/oidc.security.config.service';\r\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\nexport class AuthModule {\n/**\n * @param {?=} token\n * @return {?}\n */\nstatic forRoot(token: Token = {}): ModuleWithProviders {\n        return {\n            ngModule: AuthModule,\n            providers: [\n                OidcConfigService,\n                OidcSecurityService,\n                OidcSecurityValidation,\n                OidcSecurityCheckSession,\n                OidcSecuritySilentRenew,\n                OidcSecurityUserService,\n                OidcSecurityCommon,\n                AuthConfiguration,\n                TokenHelperService,\n                LoggerService,\n                DefaultConfiguration,\n                ArrayHelperService,\n                AuthWellKnownEndpoints,\n                OidcDataService,\n                StateValidationService,\n                {\n                    provide: OidcSecurityStorage,\n                    useClass: token.storage || BrowserStorage\n                }\n            ]\n        };\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AuthModule_tsickle_Closure_declarations() {\n/** @type {?} */\nAuthModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAuthModule.ctorParameters;\n}\n\n\nexport interface Type<T> extends Function {\n    new (...args: any[]): T;\n}\n\nexport interface Token {\n    storage?: Type<any>;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, EventEmitter, Output } from '@angular/core';\nexport class OidcConfigService {\r\n   onConfigurationLoaded = new EventEmitter<boolean>();\r\n  clientConfiguration: any;\r\n  wellKnownEndpoints: any;\n/**\n * @param {?} configUrl\n * @return {?}\n */\nasync load(configUrl: string) {\r\n    try {\r\n      const /** @type {?} */ response = await fetch(configUrl);\r\n      if (!response.ok) {\r\n        throw new Error(response.statusText);\r\n      }\r\n\r\n      this.clientConfiguration = await response.json();\r\n      await this.load_using_stsServer(this.clientConfiguration.stsServer);\r\n    } catch ( /** @type {?} */err) {\r\n      console.error(\r\n        `OidcConfigService 'load' threw an error on calling ${configUrl}`,\r\n        err\r\n      );\r\n      this.onConfigurationLoaded.emit(false);\r\n    }\r\n  }\n/**\n * @param {?} stsServer\n * @return {?}\n */\nasync load_using_stsServer(stsServer: string) {\r\n    try {\r\n      const /** @type {?} */ response = await fetch(\r\n        `${stsServer}/.well-known/openid-configuration`\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(response.statusText);\r\n      }\r\n\r\n      this.wellKnownEndpoints = await response.json();\r\n      this.onConfigurationLoaded.emit(true);\r\n    } catch ( /** @type {?} */err) {\r\n      console.error(\r\n        `OidcConfigService 'load_using_stsServer' threw an error on calling ${stsServer}`,\r\n        err\r\n      );\r\n      this.onConfigurationLoaded.emit(false);\r\n    }\r\n  }\n/**\n * @param {?} stsServer\n * @return {?}\n */\nasync load_using_custom_stsServer(stsServer: string) {\r\n    try {\r\n      const /** @type {?} */ response = await fetch(stsServer);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(response.statusText);\r\n      }\r\n      this.wellKnownEndpoints = await response.json();\r\n      this.onConfigurationLoaded.emit(true);\r\n    } catch ( /** @type {?} */err) {\r\n      console.error(\r\n        `OidcConfigService 'load_using_custom_stsServer' threw an error on calling ${stsServer}`,\r\n        err\r\n      );\r\n      this.onConfigurationLoaded.emit(false);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onConfigurationLoaded': [{ type: Output },],\n};\n}\n\nfunction OidcConfigService_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcConfigService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcConfigService.ctorParameters;\n/** @type {?} */\nOidcConfigService.propDecorators;\n/** @type {?} */\nOidcConfigService.prototype.onConfigurationLoaded;\n/** @type {?} */\nOidcConfigService.prototype.clientConfiguration;\n/** @type {?} */\nOidcConfigService.prototype.wellKnownEndpoints;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nexport type AuthorizationResult = number;\nexport let AuthorizationResult: any = {};\nAuthorizationResult.authorized = 1;\nAuthorizationResult.forbidden = 2;\nAuthorizationResult.unauthorized = 3;\nAuthorizationResult[AuthorizationResult.authorized] = \"authorized\";\nAuthorizationResult[AuthorizationResult.forbidden] = \"forbidden\";\nAuthorizationResult[AuthorizationResult.unauthorized] = \"unauthorized\";\n\n","\nexport class ValidateStateResult {\n/**\n * @param {?=} access_token\n * @param {?=} id_token\n * @param {?=} authResponseIsValid\n * @param {?=} decoded_id_token\n */\nconstructor(\npublic access_token = '',\npublic id_token = '',\npublic authResponseIsValid = false,\npublic decoded_id_token: any\n    ) {}\n}\n\nfunction ValidateStateResult_tsickle_Closure_declarations() {\n/** @type {?} */\nValidateStateResult.prototype.access_token;\n/** @type {?} */\nValidateStateResult.prototype.id_token;\n/** @type {?} */\nValidateStateResult.prototype.authResponseIsValid;\n/** @type {?} */\nValidateStateResult.prototype.decoded_id_token;\n}\n\n","import { Injectable } from '@angular/core';\nexport class DefaultConfiguration {\r\n    stsServer = 'https://localhost:44318';\r\n    redirect_url = 'https://localhost:44311';\r\n    // The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\r\n    // by the iss (issuer) Claim as an audience.\r\n    // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\r\n    // or if it contains additional audiences not trusted by the Client.\r\n    client_id = 'angularclient';\r\n    response_type = 'id_token token';\r\n    // For some oidc, we require resource identifier to be provided along with the request.\r\n    resource = '';\r\n    scope = 'openid email profile';\r\n    // Only for Google Auth with particular G Suite domain, see https://developers.google.com/identity/protocols/OpenIDConnect#hd-param\r\n    hd_param = '';\r\n    post_logout_redirect_uri = 'https://localhost:44311/unauthorized';\r\n    start_checksession = false;\r\n    silent_renew = true;\r\n    silent_renew_offset_in_seconds = 0;\r\n    silent_redirect_url = 'https://localhost:44311';\r\n    post_login_route = '/';\r\n    // HTTP 403\r\n    forbidden_route = '/forbidden';\r\n    // HTTP 401\r\n    unauthorized_route = '/unauthorized';\r\n    auto_userinfo = true;\r\n    auto_clean_state_after_authentication: true;\r\n    trigger_authorization_result_event: false;\r\n    log_console_warning_active = true;\r\n    log_console_debug_active = false;\r\n\r\n    // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\r\n    // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\r\n    max_id_token_iat_offset_allowed_in_seconds = 3;\r\n\r\n    storage = typeof Storage !== 'undefined' ? sessionStorage : null;\r\n}\n\nfunction DefaultConfiguration_tsickle_Closure_declarations() {\n/** @type {?} */\nDefaultConfiguration.prototype.stsServer;\n/** @type {?} */\nDefaultConfiguration.prototype.redirect_url;\n/** @type {?} */\nDefaultConfiguration.prototype.client_id;\n/** @type {?} */\nDefaultConfiguration.prototype.response_type;\n/** @type {?} */\nDefaultConfiguration.prototype.resource;\n/** @type {?} */\nDefaultConfiguration.prototype.scope;\n/** @type {?} */\nDefaultConfiguration.prototype.hd_param;\n/** @type {?} */\nDefaultConfiguration.prototype.post_logout_redirect_uri;\n/** @type {?} */\nDefaultConfiguration.prototype.start_checksession;\n/** @type {?} */\nDefaultConfiguration.prototype.silent_renew;\n/** @type {?} */\nDefaultConfiguration.prototype.silent_renew_offset_in_seconds;\n/** @type {?} */\nDefaultConfiguration.prototype.silent_redirect_url;\n/** @type {?} */\nDefaultConfiguration.prototype.post_login_route;\n/** @type {?} */\nDefaultConfiguration.prototype.forbidden_route;\n/** @type {?} */\nDefaultConfiguration.prototype.unauthorized_route;\n/** @type {?} */\nDefaultConfiguration.prototype.auto_userinfo;\n/** @type {?} */\nDefaultConfiguration.prototype.auto_clean_state_after_authentication;\n/** @type {?} */\nDefaultConfiguration.prototype.trigger_authorization_result_event;\n/** @type {?} */\nDefaultConfiguration.prototype.log_console_warning_active;\n/** @type {?} */\nDefaultConfiguration.prototype.log_console_debug_active;\n/** @type {?} */\nDefaultConfiguration.prototype.max_id_token_iat_offset_allowed_in_seconds;\n/** @type {?} */\nDefaultConfiguration.prototype.storage;\n}\n\nexport class OpenIDImplicitFlowConfiguration {\r\n    stsServer: string;\r\n    redirect_url: string;\r\n    client_id: string;\r\n    response_type: string;\r\n    resource: string;\r\n    scope: string;\r\n    hd_param: string;\r\n    post_logout_redirect_uri: string;\r\n    start_checksession: boolean;\r\n    silent_renew: boolean;\r\n    silent_renew_offset_in_seconds: number;\r\n    silent_renew_url: string;\r\n    post_login_route: string;\r\n    forbidden_route: string;\r\n    unauthorized_route: string;\r\n    auto_userinfo: boolean;\r\n    auto_clean_state_after_authentication: boolean;\r\n    trigger_authorization_result_event: boolean;\r\n    log_console_warning_active: boolean;\r\n    log_console_debug_active: boolean;\r\n    max_id_token_iat_offset_allowed_in_seconds: number;\r\n    storage: any;\r\n}\n\nfunction OpenIDImplicitFlowConfiguration_tsickle_Closure_declarations() {\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.stsServer;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.redirect_url;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.client_id;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.response_type;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.resource;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.scope;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.hd_param;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.post_logout_redirect_uri;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.start_checksession;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.silent_renew;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.silent_renew_offset_in_seconds;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.silent_renew_url;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.post_login_route;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.forbidden_route;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.unauthorized_route;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.auto_userinfo;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.auto_clean_state_after_authentication;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.trigger_authorization_result_event;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.log_console_warning_active;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.log_console_debug_active;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.max_id_token_iat_offset_allowed_in_seconds;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.storage;\n}\n\nexport class AuthConfiguration {\nprivate openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration;\n/**\n * @return {?}\n */\nget stsServer(): string {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration.stsServer ||\r\n            this.defaultConfig.stsServer\r\n        );\r\n    }\n/**\n * @return {?}\n */\nget redirect_url(): string {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration.redirect_url ||\r\n            this.defaultConfig.redirect_url\r\n        );\r\n    }\n/**\n * @return {?}\n */\nget silent_redirect_url(): string {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration.silent_renew_url ||\r\n            this.defaultConfig.silent_redirect_url\r\n        );\r\n    }\n/**\n * @return {?}\n */\nget client_id(): string {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration.client_id ||\r\n            this.defaultConfig.client_id\r\n        );\r\n    }\n/**\n * @return {?}\n */\nget response_type(): string {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration.response_type ||\r\n            this.defaultConfig.response_type\r\n        );\r\n    }\n/**\n * @return {?}\n */\nget resource(): string {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration.resource ||\r\n            this.defaultConfig.resource\r\n        );\r\n    }\n/**\n * @return {?}\n */\nget scope(): string {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration.scope ||\r\n            this.defaultConfig.scope\r\n        );\r\n    }\n/**\n * @return {?}\n */\nget hd_param(): string {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration.hd_param ||\r\n            this.defaultConfig.hd_param\r\n        );\r\n    }\n/**\n * @return {?}\n */\nget post_logout_redirect_uri(): string {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration.post_logout_redirect_uri ||\r\n            this.defaultConfig.post_logout_redirect_uri\r\n        );\r\n    }\n/**\n * @return {?}\n */\nget start_checksession(): boolean {\r\n        return this.openIDImplicitFlowConfiguration.start_checksession !==\r\n            undefined\r\n            ? this.openIDImplicitFlowConfiguration.start_checksession\r\n            : this.defaultConfig.start_checksession;\r\n    }\n/**\n * @return {?}\n */\nget silent_renew(): boolean {\r\n        return this.openIDImplicitFlowConfiguration.silent_renew !== undefined\r\n            ? this.openIDImplicitFlowConfiguration.silent_renew\r\n            : this.defaultConfig.silent_renew;\r\n    }\n/**\n * @return {?}\n */\nget silent_renew_offset_in_seconds(): number {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration\r\n                .silent_renew_offset_in_seconds ||\r\n            this.defaultConfig.silent_renew_offset_in_seconds\r\n        );\r\n    }\n/**\n * @return {?}\n */\nget post_login_route(): string {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration.post_login_route ||\r\n            this.defaultConfig.post_login_route\r\n        );\r\n    }\n/**\n * @return {?}\n */\nget forbidden_route(): string {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration.forbidden_route ||\r\n            this.defaultConfig.forbidden_route\r\n        );\r\n    }\n/**\n * @return {?}\n */\nget unauthorized_route(): string {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration.unauthorized_route ||\r\n            this.defaultConfig.unauthorized_route\r\n        );\r\n    }\n/**\n * @return {?}\n */\nget auto_userinfo(): boolean {\r\n        return this.openIDImplicitFlowConfiguration.auto_userinfo !== undefined\r\n            ? this.openIDImplicitFlowConfiguration.auto_userinfo\r\n            : this.defaultConfig.auto_userinfo;\r\n    }\n/**\n * @return {?}\n */\nget auto_clean_state_after_authentication(): boolean {\r\n        return this.openIDImplicitFlowConfiguration\r\n            .auto_clean_state_after_authentication !== undefined\r\n            ? this.openIDImplicitFlowConfiguration\r\n                  .auto_clean_state_after_authentication\r\n            : this.defaultConfig.auto_clean_state_after_authentication;\r\n    }\n/**\n * @return {?}\n */\nget trigger_authorization_result_event(): boolean {\r\n        return this.openIDImplicitFlowConfiguration\r\n            .trigger_authorization_result_event !== undefined\r\n            ? this.openIDImplicitFlowConfiguration\r\n                  .trigger_authorization_result_event\r\n            : this.defaultConfig.trigger_authorization_result_event;\r\n    }\n/**\n * @return {?}\n */\nget log_console_warning_active(): boolean {\r\n        return this.openIDImplicitFlowConfiguration\r\n            .log_console_warning_active !== undefined\r\n            ? this.openIDImplicitFlowConfiguration.log_console_warning_active\r\n            : this.defaultConfig.log_console_warning_active;\r\n    }\n/**\n * @return {?}\n */\nget log_console_debug_active(): boolean {\r\n        return this.openIDImplicitFlowConfiguration.log_console_debug_active !==\r\n            undefined\r\n            ? this.openIDImplicitFlowConfiguration.log_console_debug_active\r\n            : this.defaultConfig.log_console_debug_active;\r\n    }\n/**\n * @return {?}\n */\nget max_id_token_iat_offset_allowed_in_seconds(): number {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration\r\n                .max_id_token_iat_offset_allowed_in_seconds ||\r\n            this.defaultConfig.max_id_token_iat_offset_allowed_in_seconds\r\n        );\r\n    }\n/**\n * @return {?}\n */\nget storage(): any {\r\n        return (\r\n            this.openIDImplicitFlowConfiguration.storage ||\r\n            this.defaultConfig.storage\r\n        );\r\n    }\n/**\n * @param {?} defaultConfig\n */\nconstructor(private defaultConfig: DefaultConfiguration) {}\n/**\n * @param {?} openIDImplicitFlowConfiguration\n * @return {?}\n */\ninit(openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration) {\r\n        this.openIDImplicitFlowConfiguration = openIDImplicitFlowConfiguration;\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DefaultConfiguration, },\n];\n}\n\nfunction AuthConfiguration_tsickle_Closure_declarations() {\n/** @type {?} */\nAuthConfiguration.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAuthConfiguration.ctorParameters;\n/** @type {?} */\nAuthConfiguration.prototype.openIDImplicitFlowConfiguration;\n/** @type {?} */\nAuthConfiguration.prototype.defaultConfig;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { AuthConfiguration } from '../modules/auth.configuration';\n/**\n * Implement this class-interface to create a custom storage.\n * @abstract\n */\nexport abstract class OidcSecurityStorage {\n/**\n * This method must contain the logic to read the storage.\n * @abstract\n * @param {?} key\n * @return {?} The value of the given key\n */\nread(key: string) {}\n/**\n * This method must contain the logic to write the storage.\n * @abstract\n * @param {?} key\n * @param {?} value The value for the given key\n * @return {?}\n */\nwrite(key: string, value: any) {}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OidcSecurityStorage_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcSecurityStorage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcSecurityStorage.ctorParameters;\n}\n\nexport class BrowserStorage implements OidcSecurityStorage {\nprivate hasStorage: boolean;\n/**\n * @param {?} authConfiguration\n */\nconstructor(private authConfiguration: AuthConfiguration) {\n        this.hasStorage = typeof Storage !== 'undefined';\n    }\n/**\n * @param {?} key\n * @return {?}\n */\npublic read(key: string): any {\n        if (this.hasStorage) {\n            return JSON.parse(this.authConfiguration.storage.getItem(key));\n        }\n\n        return;\n    }\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\npublic write(key: string, value: any): void {\n        if (this.hasStorage) {\n            value = value === undefined ? null : value;\n            this.authConfiguration.storage.setItem(key, JSON.stringify(value));\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AuthConfiguration, },\n];\n}\n\nfunction BrowserStorage_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserStorage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserStorage.ctorParameters;\n/** @type {?} */\nBrowserStorage.prototype.hasStorage;\n/** @type {?} */\nBrowserStorage.prototype.authConfiguration;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\nimport { OidcSecurityStorage } from './oidc.security.storage';\r\n\r\nexport type SilentRenewState = 'running' | '';\nexport class OidcSecurityCommon {\nprivate storage_auth_result = 'authorizationResult';\n/**\n * @return {?}\n */\npublic get authResult(): any {\r\n        return this.retrieve(this.storage_auth_result);\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set authResult(value: any) {\r\n        this.store(this.storage_auth_result, value);\r\n    }\nprivate storage_access_token = 'authorizationData';\n/**\n * @return {?}\n */\npublic get accessToken(): string {\r\n        return this.retrieve(this.storage_access_token) || '';\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set accessToken(value: string) {\r\n        this.store(this.storage_access_token, value);\r\n    }\nprivate storage_id_token = 'authorizationDataIdToken';\n/**\n * @return {?}\n */\npublic get idToken(): string {\r\n        return this.retrieve(this.storage_id_token) || '';\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set idToken(value: string) {\r\n        this.store(this.storage_id_token, value);\r\n    }\nprivate storage_is_authorized = '_isAuthorized';\n/**\n * @return {?}\n */\npublic get isAuthorized(): boolean | undefined {\r\n        return this.retrieve(this.storage_is_authorized);\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set isAuthorized(value: boolean | undefined) {\r\n        this.store(this.storage_is_authorized, value);\r\n    }\nprivate storage_user_data = 'userData';\n/**\n * @return {?}\n */\npublic get userData(): any {\r\n        return this.retrieve(this.storage_user_data);\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set userData(value: any) {\r\n        this.store(this.storage_user_data, value);\r\n    }\nprivate storage_auth_nonce = 'authNonce';\n/**\n * @return {?}\n */\npublic get authNonce(): string {\r\n        return this.retrieve(this.storage_auth_nonce) || '';\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set authNonce(value: string) {\r\n        this.store(this.storage_auth_nonce, value);\r\n    }\nprivate storage_auth_state_control = 'authStateControl';\n/**\n * @return {?}\n */\npublic get authStateControl(): string {\r\n        return this.retrieve(this.storage_auth_state_control) || '';\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set authStateControl(value: string) {\r\n        this.store(this.storage_auth_state_control, value);\r\n    }\nprivate storage_session_state = 'session_state';\n/**\n * @return {?}\n */\npublic get sessionState(): any {\r\n        return this.retrieve(this.storage_session_state);\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set sessionState(value: any) {\r\n        this.store(this.storage_session_state, value);\r\n    }\nprivate storage_silent_renew_running = 'storage_silent_renew_running';\n/**\n * @return {?}\n */\npublic get silentRenewRunning(): SilentRenewState {\r\n        return this.retrieve(this.storage_silent_renew_running) || '';\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set silentRenewRunning(value: SilentRenewState) {\r\n        this.store(this.storage_silent_renew_running, value);\r\n    }\nprivate storage_custom_request_params = 'storage_custom_request_params';\n/**\n * @return {?}\n */\npublic get customRequestParams(): {\r\n        [key: string]: string | number | boolean;\r\n    } {\r\n        return this.retrieve(this.storage_custom_request_params);\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set customRequestParams(value: {\r\n        [key: string]: string | number | boolean;\r\n    }) {\r\n        this.store(this.storage_custom_request_params, value);\r\n    }\n/**\n * @param {?} oidcSecurityStorage\n */\nconstructor(private oidcSecurityStorage: OidcSecurityStorage) {}\n/**\n * @return {?}\n */\nsetupModule() {}\n/**\n * @param {?} key\n * @return {?}\n */\nprivate retrieve(key: string): any {\r\n        return this.oidcSecurityStorage.read(key);\r\n    }\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nprivate store(key: string, value: any) {\r\n        this.oidcSecurityStorage.write(key, value);\r\n    }\n/**\n * @param {?} isRenewProcess\n * @return {?}\n */\nresetStorageData(isRenewProcess: boolean) {\r\n        if (!isRenewProcess) {\r\n            this.store(this.storage_auth_result, '');\r\n            this.store(this.storage_session_state, '');\r\n            this.store(this.storage_silent_renew_running, '');\r\n            this.store(this.storage_is_authorized, false);\r\n            this.store(this.storage_access_token, '');\r\n            this.store(this.storage_id_token, '');\r\n            this.store(this.storage_user_data, '');\r\n        }\r\n    }\n/**\n * @return {?}\n */\ngetAccessToken(): any {\r\n        return this.retrieve(this.storage_access_token);\r\n    }\n/**\n * @return {?}\n */\ngetIdToken(): any {\r\n        return this.retrieve(this.storage_id_token);\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: OidcSecurityStorage, },\n];\n}\n\nfunction OidcSecurityCommon_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcSecurityCommon.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcSecurityCommon.ctorParameters;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_auth_result;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_access_token;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_id_token;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_is_authorized;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_user_data;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_auth_nonce;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_auth_state_control;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_session_state;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_silent_renew_running;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_custom_request_params;\n/** @type {?} */\nOidcSecurityCommon.prototype.oidcSecurityStorage;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nexport class ArrayHelperService {\nconstructor() {}\n/**\n * @param {?} arr1\n * @param {?} arr2\n * @return {?}\n */\narraysEqual(arr1: Array<string>, arr2: Array<string>) {\n        if (arr1.length !== arr2.length) {\n            return false;\n        }\n\n        for (let /** @type {?} */ i = arr1.length; i--; ) {\n            if (arr1[i] !== arr2[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ArrayHelperService_tsickle_Closure_declarations() {\n/** @type {?} */\nArrayHelperService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nArrayHelperService.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nexport class TokenHelperService {\nconstructor() {}\n/**\n * @param {?} dataIdToken\n * @return {?}\n */\ngetTokenExpirationDate(dataIdToken: any): Date {\n        if (!dataIdToken.hasOwnProperty('exp')) {\n            return new Date();\n        }\n\n        const /** @type {?} */ date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        date.setUTCSeconds(dataIdToken.exp);\n\n        return date;\n    }\n/**\n * @param {?} token\n * @param {?} encode\n * @return {?}\n */\ngetPayloadFromToken(token: any, encode: boolean) {\n        let /** @type {?} */ data = {};\n        if (typeof token !== 'undefined') {\n            const /** @type {?} */ encoded = token.split('.')[1];\n            if (encode) {\n                return encoded;\n            }\n            data = JSON.parse(this.urlBase64Decode(encoded));\n        }\n\n        return data;\n    }\n/**\n * @param {?} token\n * @param {?} encode\n * @return {?}\n */\ngetHeaderFromToken(token: any, encode: boolean) {\n        let /** @type {?} */ data = {};\n        if (typeof token !== 'undefined') {\n            const /** @type {?} */ encoded = token.split('.')[0];\n            if (encode) {\n                return encoded;\n            }\n            data = JSON.parse(this.urlBase64Decode(encoded));\n        }\n\n        return data;\n    }\n/**\n * @param {?} token\n * @param {?} encode\n * @return {?}\n */\ngetSignatureFromToken(token: any, encode: boolean) {\n        let /** @type {?} */ data = {};\n        if (typeof token !== 'undefined') {\n            const /** @type {?} */ encoded = token.split('.')[2];\n            if (encode) {\n                return encoded;\n            }\n            data = JSON.parse(this.urlBase64Decode(encoded));\n        }\n\n        return data;\n    }\n/**\n * @param {?} str\n * @return {?}\n */\nurlBase64Decode(str: string) {\n        let /** @type {?} */ output = str.replace('-', '+').replace('_', '/');\n        switch (output.length % 4) {\n            case 0:\n                break;\n            case 2:\n                output += '==';\n                break;\n            case 3:\n                output += '=';\n                break;\n            default:\n                throw Error('Illegal base64url string!');\n        }\n\n        return window.atob(output);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TokenHelperService_tsickle_Closure_declarations() {\n/** @type {?} */\nTokenHelperService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTokenHelperService.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { AuthConfiguration } from '../modules/auth.configuration';\nexport class LoggerService {\n/**\n * @param {?} authConfiguration\n */\nconstructor(private authConfiguration: AuthConfiguration) {}\n/**\n * @param {?} message\n * @return {?}\n */\nlogError(message: any) {\n        console.error(message);\n    }\n/**\n * @param {?} message\n * @return {?}\n */\nlogWarning(message: any) {\n        if (this.authConfiguration.log_console_warning_active) {\n            console.warn(message);\n        }\n    }\n/**\n * @param {?} message\n * @return {?}\n */\nlogDebug(message: any) {\n        if (this.authConfiguration.log_console_debug_active) {\n            console.log(message);\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AuthConfiguration, },\n];\n}\n\nfunction LoggerService_tsickle_Closure_declarations() {\n/** @type {?} */\nLoggerService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLoggerService.ctorParameters;\n/** @type {?} */\nLoggerService.prototype.authConfiguration;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\n\r\nimport { KJUR, KEYUTIL, hextob64u } from 'jsrsasign';\r\nimport { ArrayHelperService } from './oidc-array-helper.service';\r\nimport { TokenHelperService } from './oidc-token-helper.service';\r\nimport { LoggerService } from './oidc.logger.service';\nexport class OidcSecurityValidation {\n/**\n * @param {?} arrayHelperService\n * @param {?} tokenHelperService\n * @param {?} loggerService\n */\nconstructor(\nprivate arrayHelperService: ArrayHelperService,\nprivate tokenHelperService: TokenHelperService,\nprivate loggerService: LoggerService\r\n    ) {}\n/**\n * @param {?} token\n * @param {?=} offsetSeconds\n * @return {?}\n */\nisTokenExpired(token: string, offsetSeconds?: number): boolean {\r\n        let /** @type {?} */ decoded: any;\r\n        decoded = this.tokenHelperService.getPayloadFromToken(token, false);\r\n\r\n        return !this.validate_id_token_exp_not_expired(decoded, offsetSeconds);\r\n    }\n/**\n * @param {?} decoded_id_token\n * @param {?=} offsetSeconds\n * @return {?}\n */\nvalidate_id_token_exp_not_expired(\r\n        decoded_id_token: string,\r\n        offsetSeconds?: number\r\n    ): boolean {\r\n        const /** @type {?} */ tokenExpirationDate = this.tokenHelperService.getTokenExpirationDate(\r\n            decoded_id_token\r\n        );\r\n        offsetSeconds = offsetSeconds || 0;\r\n\r\n        if (!tokenExpirationDate) {\r\n            return false;\r\n        }\r\n\r\n        // Token not expired?\r\n        return (\r\n            tokenExpirationDate.valueOf() >\r\n            new Date().valueOf() + offsetSeconds * 1000\r\n        );\r\n    }\n/**\n * @param {?} dataIdToken\n * @return {?}\n */\nvalidate_required_id_token(dataIdToken: any): boolean {\r\n        let /** @type {?} */ validated = true;\r\n        if (!dataIdToken.hasOwnProperty('iss')) {\r\n            validated = false;\r\n            this.loggerService.logWarning(\r\n                'iss is missing, this is required in the id_token'\r\n            );\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('sub')) {\r\n            validated = false;\r\n            this.loggerService.logWarning(\r\n                'sub is missing, this is required in the id_token'\r\n            );\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('aud')) {\r\n            validated = false;\r\n            this.loggerService.logWarning(\r\n                'aud is missing, this is required in the id_token'\r\n            );\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('exp')) {\r\n            validated = false;\r\n            this.loggerService.logWarning(\r\n                'exp is missing, this is required in the id_token'\r\n            );\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('iat')) {\r\n            validated = false;\r\n            this.loggerService.logWarning(\r\n                'iat is missing, this is required in the id_token'\r\n            );\r\n        }\r\n\r\n        return validated;\r\n    }\n/**\n * @param {?} dataIdToken\n * @param {?} max_offset_allowed_in_seconds\n * @return {?}\n */\nvalidate_id_token_iat_max_offset(\r\n        dataIdToken: any,\r\n        max_offset_allowed_in_seconds: number\r\n    ): boolean {\r\n        if (!dataIdToken.hasOwnProperty('iat')) {\r\n            return false;\r\n        }\r\n\r\n        const /** @type {?} */ dateTime_iat_id_token = new Date(0); // The 0 here is the key, which sets the date to the epoch\r\n        dateTime_iat_id_token.setUTCSeconds(dataIdToken.iat);\r\n\r\n        max_offset_allowed_in_seconds = max_offset_allowed_in_seconds || 0;\r\n\r\n        if (dateTime_iat_id_token == null) {\r\n            return false;\r\n        }\r\n\r\n        this.loggerService.logDebug(\r\n            'validate_id_token_iat_max_offset: ' +\r\n                (new Date().valueOf() - dateTime_iat_id_token.valueOf()) +\r\n                ' < ' +\r\n                max_offset_allowed_in_seconds * 1000\r\n        );\r\n        return (\r\n            new Date().valueOf() - dateTime_iat_id_token.valueOf() <\r\n            max_offset_allowed_in_seconds * 1000\r\n        );\r\n    }\n/**\n * @param {?} dataIdToken\n * @param {?} local_nonce\n * @return {?}\n */\nvalidate_id_token_nonce(dataIdToken: any, local_nonce: any): boolean {\r\n        if (dataIdToken.nonce !== local_nonce) {\r\n            this.loggerService.logDebug(\r\n                'Validate_id_token_nonce failed, dataIdToken.nonce: ' +\r\n                    dataIdToken.nonce +\r\n                    ' local_nonce:' +\r\n                    local_nonce\r\n            );\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\n/**\n * @param {?} dataIdToken\n * @param {?} authWellKnownEndpoints_issuer\n * @return {?}\n */\nvalidate_id_token_iss(\r\n        dataIdToken: any,\r\n        authWellKnownEndpoints_issuer: any\r\n    ): boolean {\r\n        if (\r\n            ( /** @type {?} */((dataIdToken.iss as string))) !==\r\n            ( /** @type {?} */((authWellKnownEndpoints_issuer as string)))\r\n        ) {\r\n            this.loggerService.logDebug(\r\n                'Validate_id_token_iss failed, dataIdToken.iss: ' +\r\n                    dataIdToken.iss +\r\n                    ' authWellKnownEndpoints issuer:' +\r\n                    authWellKnownEndpoints_issuer\r\n            );\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\n/**\n * @param {?} dataIdToken\n * @param {?} aud\n * @return {?}\n */\nvalidate_id_token_aud(dataIdToken: any, aud: any): boolean {\r\n        if (dataIdToken.aud instanceof Array) {\r\n            const /** @type {?} */ result = this.arrayHelperService.arraysEqual(\r\n                dataIdToken.aud,\r\n                aud\r\n            );\r\n\r\n            if (!result) {\r\n                this.loggerService.logDebug(\r\n                    'Validate_id_token_aud  array failed, dataIdToken.aud: ' +\r\n                        dataIdToken.aud +\r\n                        ' client_id:' +\r\n                        aud\r\n                );\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        } else if (dataIdToken.aud !== aud) {\r\n            this.loggerService.logDebug(\r\n                'Validate_id_token_aud failed, dataIdToken.aud: ' +\r\n                    dataIdToken.aud +\r\n                    ' client_id:' +\r\n                    aud\r\n            );\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\n/**\n * @param {?} state\n * @param {?} local_state\n * @return {?}\n */\nvalidateStateFromHashCallback(state: any, local_state: any): boolean {\r\n        if (( /** @type {?} */((state as string))) !== ( /** @type {?} */((local_state as string)))) {\r\n            this.loggerService.logDebug(\r\n                'ValidateStateFromHashCallback failed, state: ' +\r\n                    state +\r\n                    ' local_state:' +\r\n                    local_state\r\n            );\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\n/**\n * @param {?} id_token_sub\n * @param {?} userdata_sub\n * @return {?}\n */\nvalidate_userdata_sub_id_token(\r\n        id_token_sub: any,\r\n        userdata_sub: any\r\n    ): boolean {\r\n        if (( /** @type {?} */((id_token_sub as string))) !== ( /** @type {?} */((userdata_sub as string)))) {\r\n            this.loggerService.logDebug(\r\n                'validate_userdata_sub_id_token failed, id_token_sub: ' +\r\n                    id_token_sub +\r\n                    ' userdata_sub:' +\r\n                    userdata_sub\r\n            );\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\n/**\n * @param {?} id_token\n * @param {?} jwtkeys\n * @return {?}\n */\nvalidate_signature_id_token(id_token: any, jwtkeys: any): boolean {\r\n        if (!jwtkeys || !jwtkeys.keys) {\r\n            return false;\r\n        }\r\n\r\n        const /** @type {?} */ header_data = this.tokenHelperService.getHeaderFromToken(\r\n            id_token,\r\n            false\r\n        );\r\n\r\n        if (\r\n            Object.keys(header_data).length === 0 &&\r\n            header_data.constructor === Object\r\n        ) {\r\n            this.loggerService.logWarning('id token has no header data');\r\n            return false;\r\n        }\r\n\r\n        const /** @type {?} */ kid = header_data.kid;\r\n        const /** @type {?} */ alg = header_data.alg;\r\n\r\n        if ('RS256' !== ( /** @type {?} */((alg as string)))) {\r\n            this.loggerService.logWarning('Only RS256 supported');\r\n            return false;\r\n        }\r\n\r\n        let /** @type {?} */ isValid = false;\r\n\r\n        if (!header_data.hasOwnProperty('kid')) {\r\n            // exactly 1 key in the jwtkeys and no kid in the Jose header\r\n            // kty\t\"RSA\" use \"sig\"\r\n            let /** @type {?} */ amountOfMatchingKeys = 0;\r\n            for (const /** @type {?} */ key of jwtkeys.keys) {\r\n                if (\r\n                    ( /** @type {?} */((key.kty as string))) === 'RSA' &&\r\n                    ( /** @type {?} */((key.use as string))) === 'sig'\r\n                ) {\r\n                    amountOfMatchingKeys = amountOfMatchingKeys + 1;\r\n                }\r\n            }\r\n\r\n            if (amountOfMatchingKeys === 0) {\r\n                this.loggerService.logWarning(\r\n                    'no keys found, incorrect Signature, validation failed for id_token'\r\n                );\r\n                return false;\r\n            } else if (amountOfMatchingKeys > 1) {\r\n                this.loggerService.logWarning(\r\n                    'no ID Token kid claim in JOSE header and multiple supplied in jwks_uri'\r\n                );\r\n                return false;\r\n            } else {\r\n                for (const /** @type {?} */ key of jwtkeys.keys) {\r\n                    if (\r\n                        ( /** @type {?} */((key.kty as string))) === 'RSA' &&\r\n                        ( /** @type {?} */((key.use as string))) === 'sig'\r\n                    ) {\r\n                        const /** @type {?} */ publickey = KEYUTIL.getKey(key);\r\n                        isValid = KJUR.jws.JWS.verify(id_token, publickey, [\r\n                            'RS256'\r\n                        ]);\r\n                        if (!isValid) {\r\n                            this.loggerService.logWarning(\r\n                                'incorrect Signature, validation failed for id_token'\r\n                            );\r\n                        }\r\n                        return isValid;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            // kid in the Jose header of id_token\r\n            for (const /** @type {?} */ key of jwtkeys.keys) {\r\n                if (( /** @type {?} */((key.kid as string))) === ( /** @type {?} */((kid as string)))) {\r\n                    const /** @type {?} */ publickey = KEYUTIL.getKey(key);\r\n                    isValid = KJUR.jws.JWS.verify(id_token, publickey, [\r\n                        'RS256'\r\n                    ]);\r\n                    if (!isValid) {\r\n                        this.loggerService.logWarning(\r\n                            'incorrect Signature, validation failed for id_token'\r\n                        );\r\n                    }\r\n                    return isValid;\r\n                }\r\n            }\r\n        }\r\n\r\n        return isValid;\r\n    }\n/**\n * @param {?} response_type\n * @return {?}\n */\nconfig_validate_response_type(response_type: string): boolean {\r\n        if (\r\n            response_type === 'id_token token' ||\r\n            response_type === 'id_token'\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        this.loggerService.logWarning(\r\n            'module configure incorrect, invalid response_type:' + response_type\r\n        );\r\n        return false;\r\n    }\n/**\n * @param {?} access_token\n * @param {?} at_hash\n * @return {?}\n */\nvalidate_id_token_at_hash(access_token: any, at_hash: any): boolean {\r\n        this.loggerService.logDebug('From the server:' + at_hash);\r\n        const /** @type {?} */ testdata = this.generate_at_hash('' + access_token);\r\n        this.loggerService.logDebug(\r\n            'client validation not decoded:' + testdata\r\n        );\r\n        if (testdata === ( /** @type {?} */((at_hash as string)))) {\r\n            return true; // isValid;\r\n        } else {\r\n            const /** @type {?} */ testValue = this.generate_at_hash(\r\n                '' + decodeURIComponent(access_token)\r\n            );\r\n            this.loggerService.logDebug('-gen access--' + testValue);\r\n            if (testValue === ( /** @type {?} */((at_hash as string)))) {\r\n                return true; // isValid\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\n/**\n * @param {?} access_token\n * @return {?}\n */\nprivate generate_at_hash(access_token: any): string {\r\n        const /** @type {?} */ hash = KJUR.crypto.Util.hashString(access_token, 'sha256');\r\n        const /** @type {?} */ first128bits = hash.substr(0, hash.length / 2);\r\n        const /** @type {?} */ testdata = hextob64u(first128bits);\r\n\r\n        return testdata;\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ArrayHelperService, },\n{type: TokenHelperService, },\n{type: LoggerService, },\n];\n}\n\nfunction OidcSecurityValidation_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcSecurityValidation.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcSecurityValidation.ctorParameters;\n/** @type {?} */\nOidcSecurityValidation.prototype.arrayHelperService;\n/** @type {?} */\nOidcSecurityValidation.prototype.tokenHelperService;\n/** @type {?} */\nOidcSecurityValidation.prototype.loggerService;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { OidcSecurityCommon } from './oidc.security.common';\nimport { OidcSecurityValidation } from './oidc.security.validation';\nimport { AuthConfiguration } from '../modules/auth.configuration';\nimport { ValidateStateResult } from '../models/validate-state-result.model';\nimport { JwtKeys } from '../models/jwtkeys';\nimport { TokenHelperService } from './oidc-token-helper.service';\nimport { LoggerService } from './oidc.logger.service';\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\nexport class StateValidationService {\nprivate authWellKnownEndpoints: AuthWellKnownEndpoints;\n/**\n * @param {?} authConfiguration\n * @param {?} oidcSecurityCommon\n * @param {?} oidcSecurityValidation\n * @param {?} tokenHelperService\n * @param {?} loggerService\n */\nconstructor(\nprivate authConfiguration: AuthConfiguration,\npublic oidcSecurityCommon: OidcSecurityCommon,\nprivate oidcSecurityValidation: OidcSecurityValidation,\nprivate tokenHelperService: TokenHelperService,\nprivate loggerService: LoggerService\n    ) {}\n/**\n * @param {?} authWellKnownEndpoints\n * @return {?}\n */\nsetupModule(authWellKnownEndpoints: AuthWellKnownEndpoints) {\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\n    }\n/**\n * @param {?} result\n * @param {?} jwtKeys\n * @return {?}\n */\nvalidateState(result: any, jwtKeys: JwtKeys): ValidateStateResult {\n        const /** @type {?} */ toReturn = new ValidateStateResult('', '', false, {});\n        if (\n            !this.oidcSecurityValidation.validateStateFromHashCallback(\n                result.state,\n                this.oidcSecurityCommon.authStateControl\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback incorrect state');\n            return toReturn;\n        }\n\n        if (this.authConfiguration.response_type === 'id_token token') {\n            toReturn.access_token = result.access_token;\n        }\n        toReturn.id_token = result.id_token;\n\n        toReturn.decoded_id_token = this.tokenHelperService.getPayloadFromToken(\n            toReturn.id_token,\n            false\n        );\n\n        if (\n            !this.oidcSecurityValidation.validate_signature_id_token(\n                toReturn.id_token,\n                jwtKeys\n            )\n        ) {\n            this.loggerService.logDebug(\n                'authorizedCallback Signature validation failed id_token'\n            );\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_nonce(\n                toReturn.decoded_id_token,\n                this.oidcSecurityCommon.authNonce\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback incorrect nonce');\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_required_id_token(\n                toReturn.decoded_id_token\n            )\n        ) {\n            this.loggerService.logDebug(\n                'authorizedCallback Validation, one of the REQUIRED properties missing from id_token'\n            );\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_iat_max_offset(\n                toReturn.decoded_id_token,\n                this.authConfiguration\n                    .max_id_token_iat_offset_allowed_in_seconds\n            )\n        ) {\n            this.loggerService.logWarning(\n                'authorizedCallback Validation, iat rejected id_token was issued too far away from the current time'\n            );\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_iss(\n                toReturn.decoded_id_token,\n                this.authWellKnownEndpoints.issuer\n            )\n        ) {\n            this.loggerService.logWarning(\n                'authorizedCallback incorrect iss does not match authWellKnownEndpoints issuer'\n            );\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_aud(\n                toReturn.decoded_id_token,\n                this.authConfiguration.client_id\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback incorrect aud');\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_exp_not_expired(\n                toReturn.decoded_id_token\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback token expired');\n            return toReturn;\n        }\n\n        // flow id_token token\n        if (this.authConfiguration.response_type !== 'id_token token') {\n            toReturn.authResponseIsValid = true;\n            this.handleSuccessfulValidation();\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_at_hash(\n                toReturn.access_token,\n                toReturn.decoded_id_token.at_hash\n            ) ||\n            !toReturn.access_token\n        ) {\n            this.loggerService.logWarning(\n                'authorizedCallback incorrect at_hash'\n            );\n            return toReturn;\n        }\n\n        toReturn.authResponseIsValid = true;\n        this.handleSuccessfulValidation();\n        return toReturn;\n    }\n/**\n * @return {?}\n */\nprivate handleSuccessfulValidation() {\n        this.oidcSecurityCommon.authNonce = '';\n\n        if (this.authConfiguration.auto_clean_state_after_authentication) {\n            this.oidcSecurityCommon.authStateControl = '';\n        }\n        this.loggerService.logDebug(\n            'AuthorizedCallback token(s) validated, continue'\n        );\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AuthConfiguration, },\n{type: OidcSecurityCommon, },\n{type: OidcSecurityValidation, },\n{type: TokenHelperService, },\n{type: LoggerService, },\n];\n}\n\nfunction StateValidationService_tsickle_Closure_declarations() {\n/** @type {?} */\nStateValidationService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStateValidationService.ctorParameters;\n/** @type {?} */\nStateValidationService.prototype.authWellKnownEndpoints;\n/** @type {?} */\nStateValidationService.prototype.authConfiguration;\n/** @type {?} */\nStateValidationService.prototype.oidcSecurityCommon;\n/** @type {?} */\nStateValidationService.prototype.oidcSecurityValidation;\n/** @type {?} */\nStateValidationService.prototype.tokenHelperService;\n/** @type {?} */\nStateValidationService.prototype.loggerService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["_this","_scheduledHeartBeat","setTimeout","_pollServerSessionRecur","this","zone","runOutsideAngular","OidcSecurityCheckSession","prototype","messageHandler","e","sessionIframe","origin","authConfiguration","stsServer","source","contentWindow","data","loggerService","logWarning","onCheckSessionChanged","emit","logDebug","decorators","type","Injectable","ctorParameters","AuthConfiguration","OidcSecurityCommon","LoggerService","NgZone","propDecorators","Output","OidcSecuritySilentRenew","initRenew","existsparent","undefined","parentdoc","window","parent","document","Error","getElementById","exists","createElement","id","style","display","body","appendChild","startRenew","url","src","Observable","create","observer","onload","next","complete","OidcDataService","httpClient","getWellknownEndpoints","headers","HttpHeaders","set","get","getIdentityUserData","token","decodeURIComponent","HttpClient","OidcSecurityUserService","oidcDataService","oidcSecurityCommon","userData","setupModule","authWellKnownEndpoints","Object","assign","initUserData","pipe","map","getUserData","setUserData","value","getAccessToken","userinfo_endpoint","UriEncoder","encodeKey","key","encodeURIComponent","encodeValue","decodeKey","decodeValue","OidcSecurityService","platformId","stateValidationService","router","oidcSecurityCheckSession","oidcSecuritySilentRenew","oidcSecurityUserService","oidcSecurityValidation","tokenHelperService","onModuleSetup","EventEmitter","onAuthorizationResult","moduleSetup","_isAuthorized","BehaviorSubject","_userData","authWellKnownEndpointsLoaded","openIDImplicitFlowConfiguration","init","subscribe","checkSessionChanged","onUserDataChanged","isAuthorized","idToken","isTokenExpired","silent_renew_offset_in_seconds","setIsAuthorized","runTokenValidation","isPlatformBrowser","silent_renew","boundSilentRenewEvent","silentRenewEventHandler","bind","addEventListener","start_checksession","doesSessionExist","pollServerSession","client_id","asObservable","getIsAuthorized","getToken","_isAuthorizedValue","getIdToken","getPayloadFromIdToken","encode","getPayloadFromToken","setState","state","authStateControl","getState","setCustomRequestParameters","params","customRequestParams","authorize","urlHandler","logError","config_validate_response_type","response_type","resetAuthorizationData","Date","now","Math","random","nonce","authNonce","createAuthorizeUrl","redirect_url","authorization_endpoint","location","href","authorizedCallback","hash","silentRenew","silentRenewRunning","isRenewProcess","substr","result","split","reduce","resultData","item","parts","authResult","getSigningKeys","jwtKeys","validationResult","getValidatedStateResult","authResponseIsValid","setAuthorizationData","access_token","id_token","auto_userinfo","getUserinfo","decoded_id_token","response","AuthorizationResult","authorized","trigger_authorization_result_event","navigate","post_login_route","unauthorized","unauthorized_route","err","JSON","stringify","sessionState","session_state","validate_userdata_sub_id_token","sub","accessToken","logoff","end_session_endpoint","id_token_hint","createEndSessionUrl","refreshSession","silent_redirect_url","handleError","error","status","forbidden_route","startCheckingSilentRenew","stopCheckingSilentRenew","clearTimeout","runTokenValidationRunning","ValidateStateResult","validateState","prompt","urlParts","authorizationUrl","HttpParams","fromString","encoder","append","scope","hd_param","customParams","keys","forEach","toString","authorizationEndsessionUrl","post_logout_redirect_uri","resetStorageData","lastUserData","jwks_uri","catchError","handleErrorGetSigningKeys","errMsg","Response","json","statusText","message","console","throw","silentRenewHeartBeatCheck","detail","Inject","args","PLATFORM_ID","StateValidationService","Router","OidcSecurityValidation","TokenHelperService","AuthWellKnownEndpoints","setWellKnownEndpoints","issuer","token_endpoint","check_session_iframe","revocation_endpoint","introspection_endpoint","JwtKeys","JwtKey","AuthModule","forRoot","ngModule","providers","OidcConfigService","DefaultConfiguration","ArrayHelperService","provide","OidcSecurityStorage","useClass","storage","BrowserStorage","NgModule","onConfigurationLoaded","load","configUrl","fetch","_b","sent","ok","_a","clientConfiguration","load_using_stsServer","err_1","wellKnownEndpoints","err_2","load_using_custom_stsServer","err_3","forbidden","resource","log_console_warning_active","log_console_debug_active","max_id_token_iat_offset_allowed_in_seconds","Storage","sessionStorage","OpenIDImplicitFlowConfiguration","defaultConfig","defineProperty","silent_renew_url","auto_clean_state_after_authentication","read","write","hasStorage","parse","getItem","setItem","oidcSecurityStorage","storage_auth_result","storage_access_token","storage_id_token","storage_is_authorized","storage_user_data","storage_auth_nonce","storage_auth_state_control","storage_session_state","storage_silent_renew_running","storage_custom_request_params","retrieve","store","arraysEqual","arr1","arr2","length","i","getTokenExpirationDate","dataIdToken","hasOwnProperty","date","setUTCSeconds","exp","encoded","urlBase64Decode","getHeaderFromToken","getSignatureFromToken","str","output","replace","atob","warn","log","arrayHelperService","offsetSeconds","decoded","validate_id_token_exp_not_expired","tokenExpirationDate","valueOf","validate_required_id_token","validated","validate_id_token_iat_max_offset","max_offset_allowed_in_seconds","dateTime_iat_id_token","iat","validate_id_token_nonce","local_nonce","validate_id_token_iss","authWellKnownEndpoints_issuer","iss","validate_id_token_aud","aud","Array","validateStateFromHashCallback","local_state","id_token_sub","userdata_sub","validate_signature_id_token","jwtkeys","header_data","constructor","kid","alg","isValid","_d","_e","publickey","KEYUTIL","getKey","KJUR","jws","JWS","verify","amountOfMatchingKeys","_i","_c","validate_id_token_at_hash","at_hash","testdata","generate_at_hash","testValue","crypto","Util","hashString","first128bits","hextob64u","toReturn","handleSuccessfulValidation","iframeMessageEvent","startCheckingSession","clientId","stopCheckingSession","postMessage"],"mappings":"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"}